(deflisten weather :initial "null" "scripts/weather.py")
(deflisten  mpris     `scripts/mpris.py`)
(deflisten volume :initial "0" "scripts/volume")


(defwidget central []
  (eventbox :onhoverlost "eww close central"
    (box :class "central-widget" :orientation "v" :space-evenly false :spacing 10 :hexpand false 
      (box-weather)
      (box-volume)
      (box-center)
      (media)
    )
))




(defwidget box-top []
 (box :spacing 10 :class "box-top" :space-evenly false
  (box :orientation "v" :space-evenly false :halign "start" :spacing 10 :width 180
      (box :height 50 :orientation "h" :class "bluetooth" :space-evenly false :haling "center" :spacing 10
        (label :width 45 :class "wifi-icon" :halign "start" :text "") 
    (box :orientation "v" :space-evenly false :halign "start"
        (button :haling "start" "Connection")
        (label :halign "start" :text "Internet")))

     (box :height 50 :orientation "h" :class "bluetooth" :space-evenly false :haling "center" :spacing 10
        (label :width 45 :class "bluetooth-icon" :halign "start" :text "󰂯") 
    (box :orientation "v" :space-evenly false :halign "start"
        (button :haling "start" "Bluetooth")
        (label :halign "start" :text "B21q"))))

   (box :class "icons" :space-evenly false :spacing 25
    (box :orientation "v"
    (button :width 65 "")
    (button :width 65 "󰺷"))

    (box :orientation "v"
    (button :width 75 "")
    (button :width 75 "󰊫"))


 )))


(defwidget box-center []
  (box :orientation ""
    (box :orientation "v"
      (label :class "memory" :text {mem}))


  (box :orientation "v" :spacing 10
    (box
     (box :orientation "v" :space-evenly false :halign "start" :spacing 10 :width 180
      (box :height 50 :orientation "h" :class "bluetooth" :space-evenly false :haling "center" :spacing 10
        (label :width 45 :class "wifi-icon" :halign "start" :text "󰗕") 
    (box :orientation "v" :space-evenly false :halign "start"
        (button :haling "start" "Do not disturb")
        (label :halign "start" :text "Off")))))


     (box :orientation "v" :space-evenly false :halign "start" :spacing 10 :width 180
      (box :height 50 :orientation "h" :class "bluetooth" :space-evenly false :haling "center" :spacing 10
        (label :width 45 :class "dark-icon" :halign "start" :text "󰽥") 
    (box :orientation "v" :space-evenly false :halign "start"
        (button :haling "start" "Dark mode")
        (label :halign "start" :text "On")))))))



(defwidget box-profile []
  (box :class "box-profile" :space-evenly false
    (box :class "profile" :space-evenly false :style "background-image: url('${perfil}')" :valign "center")
      (box :class "box-about" :halign "center" :valign "center" 
	      (box :orientation "v" :valign "center" :halign "center" :spacing -3
          (label :class "name"  :valign "center" :halign "start"  :text {name})
	        (label :class "wm"    :valign "center" :halign "start"  :text {wm})))
            (box :valign "center" :halign "end" :hexpand true
              (eventbox :cursor "pointer"
                (button :class "lock" :onclick "poweroff"
                 ""))
              (eventbox :cursor "pointer"
                (button :class "exit" :onclick "eww close central && eww open --toggle powermenu"
                "⏻")))))


(defwidget box-weather []
  (box :orientation "v" :space-evenly false :class "weather"
    (label :class "weather-connection-error" :text "Loading" :visible {weather != "null" ? false : true})
      (box :orientation "h" :space-evenly false
        (label :hexpand true :class "weather-current-icon" :halign "start" :valign "start" :text {weather.current.icon})
          (box :hexpand true :orientation "v" :space-evenly false :halign "end" :valign "start"
            (label :halign "end" :class "weather-location" :text {weather.location})
            (label :limit-width 20 :halign "end" :class "weather-current-text" :text {weather.current.text})))

        (box :orientation "h" :space-evenly false :class "weather-info"
            (box :orientation "v" :space-evenly false :halign "start" :hexpand true
                (label :halign "start" :class "weather-current-temp" :text {weather.current.temp})
                (box :orientation "h" :space-evenly true
                    (label :class "weather-current-maxtemp" :text {weather.maxtemp})
                    (label :class "weather-current-mintemp" :text {weather.mintemp})
                )
            )
            (box :orientation "h" :space-evenly false :halign "end" :hexpand true
                (for hour in {weather.hourly}
                    (box :orientation "v" :space-evenly false :class "weather-hour"
                        (label :class "weather-hour-temp" :text {hour.temp})
                        (label :class "weather-hour-icon" :text {hour.icon})
                        (label :class "weather-hour-time" :text {hour.time})
                    )
                )
            )
        )
    )
)



(defwidget volume_osd []
    (revealer :transition "slidedown" :reveal {open_osd == true ? true : false} :duration "500ms"
        (eventbox :cursor "pointer" :orientation "h" :class "volume-osd" :space-evenly false
            (volume_scale)
        )
    )
)

(defwidget volume_scale []
    (overlay :hexpand true
        (scale :min 0 :max 100 :active {volume != "muted"} :value {volume == "muted" ? 0 : volume} :onchange "pamixer --set-volume {}" :class "volume-scale")
        (label :class 'volume-icon ${volume == "muted" ? "less" : volume < 5 ? "less" : "more"}' :halign "start" :text {volume == "muted" ? "󰸈" : volume < 33 ? "" : volume < 67 ? "" : ""})
    )
)

(defwidget box-volume []
    (box :orientation "h" :class "volume-control-center" :space-evenly false
      (volume_scale)
        (eventbox :cursor "pointer"
          (button :class "volume-arrow" :onclick "scripts/toggle_control_center.sh close && pavucontrol &" "󰅂"))))


(defwidget media []
  (box 
    :class "media" 
    :orientation "v"
	:hexpand false
	:space-evenly false
	:width 300
    (for player in {mpris}
      (media_player :player player)
    )
  )
)


(defwidget media_player [player] 
  (box
    :class "player ${player.name}"
    :space-evenly true
    (box 
      :class "cover"
      :style "background-image: url('${player.artUrl}');"
	  :space-evenly true
	  :hexpand false
      (box
        :class "gradient"
        :orientation "v"
        :space-evenly false
        :hexpand false
        (box
          :class "info"
          :orientation "v"
          :space-evenly false
          :spacing 10
          (label 
            :class "title" 
            :text {player.title}
            :limit-width 100
            :wrap true
            :xalign 0
          )
          (label 
            :class "artist" 
            :text {player.artist}
            :limit-width 100
            :wrap true
            :xalign 0
          )
          (label 
            :class "album" 
            :text {player.album}
            :limit-width 100
            :wrap true
            :xalign 0
          )
        )
        (box
          :space-evenly false
          :orientation "v"
          :valign "END"
          :vexpand false
          (eventbox :cursor "pointer"
            :visible {player.length != "null"}
            :class "progress"
            :hexpand false
            (scale
              :value {positions[player.name].position}
              :min 0
              :max {player.length}
              :onchange "playerctl -p ${player.name} position {}"
            )
          )
          (box
            :hexpand false
            :space-evenly false
            :class "inferior"
            :spacing 6
            (label
              :class "app ${player.name}" 
              :text {player.name == "spotify" ? "" : player.name =~ "chromium" ? "" : player.name =~ "firefox" ? "" : ":)"}
            )
            (box 
              :class "position" 
              :visible {player.length != "null"}
              :space-evenly false
			  :hexpand false
			  :width 20
              :spacing 10
              (label 
                :class "time"
                :text {
                  ;positions[player.name].position == "null" ? 0 : 
                  positions[player.name].positionStr
                }
              )
              (label :text "/" :class "time")
              (label 
                :class "time"
                :text {
                  player.length == "null" ? formattime(0, "%M:%S") :
                  player.lengthStr
                }
              )
            )
            (box
              :class "controls"
              :halign "end"
              :hexpand true
			  :width 50
              :spacing 10
              (eventbox :cursor "pointer"
                (button 
                  :onclick "playerctl -p spotify shuffle toggle"
                  :class "shuffle ${player.shuffle ? "on" : "off"}"
                  :tooltip {player.shuffle ? "On" : "Off"} 
                  :visible {player.loop != "null"} 
                  ""
                )
              )
              (eventbox :cursor "pointer"
                (button 
                  :onclick {
                    player.loop == "None" ? 
                    "playerctl -p spotify loop playlist" : 
                    player.loop == "Playlist" ? 
                    "playerctl -p spotify loop track" :
                    "playerctl -p spotify loop none"
                  }
                  :class "loop ${player.loop == 'Playlist' || player.loop == 'Track' ? "on" : "off"}"
                  :tooltip {player.loop}
                  :visible {player.loop != "null"}
                  {player.loop == "Track" ? "󰲸" :player.loop == "Playlist" ? "󰲸" : "󰐓"}
                )
              )
              (eventbox :cursor {player.canGoPrevious ? "pointer" : "not-allowed"}
                (button 
                  :class "previous ${player.canGoPrevious ? "canGoPrevious" : ""}" 
                  :onclick "playerctl -p ${player.name} previous" 
                  ""
                )
              )
              (eventbox :cursor "pointer"
                (button 
                  :class "toggle ${player.canPlay ? "canPlay" : player.canPause ? "canPause" : ""}" 
                  :width 20
                  :onclick "playerctl -p ${player.name} play-pause" 
                  {
                    player.status == "Playing" ? "" : 
                    player.status == "Paused" ? "" : 
                    ""
                  }
                )
              )
              (eventbox :cursor {player.canGoNext ? "pointer" : "not-allowed"}
                (button 
                  :class "next ${player.canGoNext ? "canGoNext" : ""}" 
                  :onclick "playerctl -p ${player.name} next" ""
                )
              )
            )
          )
        )
      )
    )

  )
)

(defwindow central
  :monitor 0
  :geometry (geometry :x "5%"
                      :y "0%"
                      :height "0%"
                      :widget "100%"
                      :anchor "bottom left")
  (central))
